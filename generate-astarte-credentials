#!/usr/bin/env python3

import argparse
import datetime
import jwt

api_claims = {"appengine": "a_aea", "realm": "a_rma", "housekeeping": "a_ha"}

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate credentials for various Astarte components")
    parser.add_argument("-t", "--type", type=str, required=True, choices=['agent', 'housekeeping', 'realm', 'appengine'],
        help="The type of credential you want to generate.")
    parser.add_argument("-p", "--private-key", type=str, required=True, help="Path to the private key file for signing "\
        "the Authorization token.")
    parser.add_argument("-e", "--expiry", type=int, required=False, default=300, help="Expiry of the token in seconds. "\
        "If 0, the token never expires. Defaults to 5 minutes. Doesn't apply to Agent Keys.")
    parser.add_argument("-a", "--auth-paths", type=str, required=False, nargs='+', default=["^.*$::^.*$"],
        help="Defines a series of regular expressions for path-based authorization. Doesn't apply to Agent Keys.")
    parser.add_argument("-r", "--realm", type=str, required=False, help="Defines the realm in which this Agent will "\
        "be authorized. Required when generating an Agent Key.")
    args = parser.parse_args()
    args_map = vars(args)

    with open(args_map["private_key"], "r") as pk:
        private_key_pem = pk.read()

        if args_map["type"] == "agent":
            realm = args_map["realm"]
            if not realm:
                raise Exception("You have to specify a realm with the -r option when generating an Agent Key.")
            claims = {"routingTopic": realm}
        else:
            now = datetime.datetime.utcnow()
            claims = {api_claims[args_map["type"]]: args_map["auth_paths"], "iat": now}
            expiry = args_map["expiry"]
            if expiry > 0:
                claims["exp"] = now + datetime.timedelta(seconds=expiry)

        encoded = jwt.encode(claims, private_key_pem, algorithm="RS256")
        print("{0}".format(encoded.decode()))
